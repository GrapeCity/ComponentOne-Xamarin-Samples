<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddPoint" xml:space="preserve">
    <value>점 추가</value>
  </data>
  <data name="BasicChartTypesDescription" xml:space="preserve">
    <value>기본 차트 유형 및 스택 옵션을 표시합니다.</value>
  </data>
  <data name="BasicChartTypesTitle" xml:space="preserve">
    <value>기본 차트 유형</value>
  </data>
  <data name="BubbleChartDescription" xml:space="preserve">
    <value>버블 차트를 표시합니다.</value>
  </data>
  <data name="BubbleChartTitle" xml:space="preserve">
    <value>버블 차트</value>
  </data>
  <data name="ConditionalFormattingDescription" xml:space="preserve">
    <value>Plot 요소를 사용자 지정하여 조건부 서식을 표시합니다.</value>
  </data>
  <data name="ConditionalFormattingTitle" xml:space="preserve">
    <value>조건부 서식</value>
  </data>
  <data name="CustomizingAxesDescription" xml:space="preserve">
    <value>사용자 지정 축 스타일 및 레이블 형식을 표시합니다.</value>
  </data>
  <data name="CustomizingAxesTitle" xml:space="preserve">
    <value>축 사용자 지정</value>
  </data>
  <data name="CustomPlotElementsDescription" xml:space="preserve">
    <value>Plot 요소를 완전히 사용자 지정하는 방법을 표시합니다.</value>
  </data>
  <data name="CustomPlotElementsTitle" xml:space="preserve">
    <value>사용자 지정 Plot 요소</value>
  </data>
  <data name="CustomTooltipsDescription" xml:space="preserve">
    <value>사용자 정의 도구 설명을 표시합니다.</value>
  </data>
  <data name="CustomTooltipsTitle" xml:space="preserve">
    <value>사용자 지정 도구 설명</value>
  </data>
  <data name="DataLabelsDescription" xml:space="preserve">
    <value>정적 데이터 레이블이 있는 간단한 차트를 표시합니다.</value>
  </data>
  <data name="DataLabelsTitle" xml:space="preserve">
    <value>데이터 레이블</value>
  </data>
  <data name="DynamicChartDescription" xml:space="preserve">
    <value>동적인 “라이브” 차트를 표시합니다.</value>
  </data>
  <data name="DynamicChartTitle" xml:space="preserve">
    <value>동적 차트</value>
  </data>
  <data name="ExportImageDescription" xml:space="preserve">
    <value>FlexChart의 이미지를 내보내는 방법을 표시합니다.</value>
  </data>
  <data name="ExportImageTitle" xml:space="preserve">
    <value>이미지 내보내기</value>
  </data>
  <data name="FinancialChartDescription" xml:space="preserve">
    <value>주식 데이터를 캔들 차트로 표시합니다.</value>
  </data>
  <data name="FinancialChartTitle" xml:space="preserve">
    <value>재무 차트</value>
  </data>
  <data name="GettingStartedDescription" xml:space="preserve">
    <value>도구 설명과 함께 간단한 차트를 표시합니다.</value>
  </data>
  <data name="GettingStartedTitle" xml:space="preserve">
    <value>시작하기</value>
  </data>
  <data name="HitTestDescription" xml:space="preserve">
    <value>FlexChart의 hitTest 메서드 사용을 보여줍니다.</value>
  </data>
  <data name="HitTestTitle" xml:space="preserve">
    <value>Hit Test</value>
  </data>
  <data name="LegendSampleDescription" xml:space="preserve">
    <value>기본 차트 머리글 및 축 제목을 표시합니다.</value>
  </data>
  <data name="LegendSampleTitle" xml:space="preserve">
    <value>범례 및 제목</value>
  </data>
  <data name="LoadAnimationDescription" xml:space="preserve">
    <value>데이터가 로드될 때 애니메이션 모드를 표시합니다.</value>
  </data>
  <data name="LoadAnimationTitle" xml:space="preserve">
    <value>애니메이션 모드 로드</value>
  </data>
  <data name="MixedChartTypesDescription" xml:space="preserve">
    <value>복합 차트를 표시합니다.</value>
  </data>
  <data name="MixedChartTypesTitle" xml:space="preserve">
    <value>혼합 차트 유형</value>
  </data>
  <data name="MultipleAxesDescription" xml:space="preserve">
    <value>Y축이 여러 개인 차트를 표시합니다.</value>
  </data>
  <data name="MultipleAxesTitle" xml:space="preserve">
    <value>여러 축</value>
  </data>
  <data name="RemovePoint" xml:space="preserve">
    <value>점 제거</value>
  </data>
  <data name="ScrollingDescription" xml:space="preserve">
    <value>축을 따라 이동(또는 스크롤)하는 차트를 표시합니다.</value>
  </data>
  <data name="ScrollingTitle" xml:space="preserve">
    <value>스크롤</value>
  </data>
  <data name="ScrollZoomInstructions" xml:space="preserve">
    <value>드래그하여 스크롤/핀치하여 확대 또는 축소</value>
  </data>
  <data name="SelectionModesDescription" xml:space="preserve">
    <value>다양한 선택 모드를 표시합니다.</value>
  </data>
  <data name="SelectionModesTitle" xml:space="preserve">
    <value>선택 모드</value>
  </data>
  <data name="StylingSeriesDescription" xml:space="preserve">
    <value>사용자 지정된 계열 스타일 지정을 표시합니다.</value>
  </data>
  <data name="StylingSeriesTitle" xml:space="preserve">
    <value>계열 스타일 지정</value>
  </data>
  <data name="ThemingDescription" xml:space="preserve">
    <value>기본 제공 팔레트를 표시합니다.</value>
  </data>
  <data name="ThemingTitle" xml:space="preserve">
    <value>테마 설정</value>
  </data>
  <data name="ToggleSeriesDescription" xml:space="preserve">
    <value>계열 표시 여부를 토글하는 기능을 표시합니다.</value>
  </data>
  <data name="ToggleSeriesTitle" xml:space="preserve">
    <value>계열 토글</value>
  </data>
  <data name="UpdateAnimationDescription" xml:space="preserve">
    <value>데이터가 업데이트될 때 애니메이션을 표시합니다.</value>
  </data>
  <data name="UpdateAnimationTitle" xml:space="preserve">
    <value>애니메이션 업데이트</value>
  </data>
  <data name="ZoomingScrollingDescription" xml:space="preserve">
    <value>늘여서 확대 및 핀치하여 축소 제스처를 표시합니다.</value>
  </data>
  <data name="ZoomingScrollingTitle" xml:space="preserve">
    <value>확대/축소 및 스크롤</value>
  </data>
  <data name="LineMarkerDescription" xml:space="preserve">
    <value>차트 위에 이동할 수 있는 표식을 표시합니다.</value>
  </data>
  <data name="LineMarkerTitle" xml:space="preserve">
    <value>라인 표식</value>
  </data>
  <data name="ImageSavedDescription" xml:space="preserve">
    <value>이미지가 장치의 그림 앨범에 저장되었습니다.</value>
  </data>
  <data name="ImageSavedTitle" xml:space="preserve">
    <value>이미지 저장됨</value>
  </data>
  <data name="OKTitle" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="AnnotationDescription" xml:space="preserve">
    <value>FlexChart에 주석을 표시하는 방법을 보여줍니다.</value>
  </data>
  <data name="AnnotationTitle" xml:space="preserve">
    <value>주석</value>
  </data>
  <data name="TakeSnapshot" xml:space="preserve">
    <value>스냅샷 찍기</value>
  </data>
    <data name="PieBasicFeaturesDescription" xml:space="preserve">
    <value>내부 반경, 오프셋 및 시작 각도를 표시합니다.</value>
  </data>
  <data name="PieBasicFeaturesTitle" xml:space="preserve">
    <value>기본 기능</value>
  </data>	
  <data name="PieLegendSampleDescription" xml:space="preserve">
    <value>기본 머리글, 바닥글 및 범례 위치를 표시합니다.</value>
  </data>
  <data name="PieLegendSampleTitle" xml:space="preserve">
    <value>범례 및 제목</value>
  </data>
  <data name="PieSelectionDescription" xml:space="preserve">
    <value>선택 애니메이션, 오프셋 및 위치를 표시합니다.</value>
  </data>
  <data name="PieSelectionTitle" xml:space="preserve">
    <value>선택</value>
  </data>
  <data name="PieThemingDescription" xml:space="preserve">
    <value>사용 가능한 팔레트를 표시합니다.</value>
  </data>
  <data name="PieThemingTitle" xml:space="preserve">
    <value>테마 설정</value>
  </data>
</root>